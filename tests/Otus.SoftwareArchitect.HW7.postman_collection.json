{
	"info": {
		"_postman_id": "9eeb0ac7-f234-44b0-8f5c-9bb267f79608",
		"name": "Otus.SoftwareArchitect.HW7",
		"description": "Реализованы 3 сервиса: заказа, биллинга, нотификаций. При создании пользователя создается аккаунт в сервисе биллинга, в котором есть возможность положить деньги на аккаунт и снять деньги. Сервис нотификаций позволяет отправить сообщение на email и получить список отправленных сообщений",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Создание пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"username\", pm.variables.replaceIn(\"{{$randomUserName}}\"));",
							"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
							"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));",
							"pm.collectionVariables.set(\"phone\", pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"));",
							"pm.collectionVariables.set(\"password\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"var responseJSON = JSON.parse(responseBody)",
							"pm.collectionVariables.set(\"userId\", responseJSON[\"userId\"])",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"phone\": \"{{phone}}\"\n}"
				},
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/billing/user",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"billing",
						"user"
					]
				},
				"description": "Создание пользователя\n"
			},
			"response": [
				{
					"name": "Пользователь создан",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"userId\": -77863759\n}"
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Пополнение баланса пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{deposit_amount}}\n}"
				},
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/billing/deposit/:userId",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"billing",
						"deposit",
						":userId"
					],
					"variable": [
						{
							"description": "(Required) ID пользователя",
							"key": "userId",
							"type": "string",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Пополнение баланса пользователя\n"
			},
			"response": [
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"<long>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/billing/deposit/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"deposit",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Пользователя не существует",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"<long>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/billing/deposit/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"deposit",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Успешный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"<long>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/billing/deposit/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"deposit",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"<long>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/billing/deposit/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"deposit",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Ошибочная попытка создание заказа без указания версии коллекции",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{order_price}}\n}"
				},
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/orders/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"orders",
						"order"
					]
				},
				"description": "Создание заказа для пользователя с указанием цены\n"
			},
			"response": [
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Заказ создан и оплачен",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"userId\": -33416308\n}"
				}
			]
		},
		{
			"name": "Проверка неизменности баланса пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must have a body with expected format\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"    pm.expect(jsonData.firstname).to.be.a(\"string\");",
							"    pm.expect(jsonData.lastname).to.be.a(\"string\");",
							"    pm.expect(jsonData.email).to.be.a(\"string\");",
							"    pm.expect(jsonData.phone).to.be.a(\"string\");",
							"    pm.expect(jsonData.balance).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Balance didn't changed\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.balance).to.eql(Number(pm.collectionVariables.get(\"deposit_amount\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/billing/user/:userId",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"billing",
						"user",
						":userId"
					],
					"variable": [
						{
							"description": "(Required) ID пользователя",
							"key": "userId",
							"type": "string",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Получение информации о пользователе\n"
			},
			"response": [
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Успешный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"id\": -28837666,\n \"username\": \"occ\",\n \"firstName\": \"do\",\n \"lastName\": \"an\",\n \"email\": \"ixcK\",\n \"phone\": \"irur\",\n \"balance\": 14846486\n}"
				},
				{
					"name": "Пользователя не существует",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Получение версии коллекции заказов для пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Etag header is present\", () => {",
							"  pm.response.to.have.header(\"Etag\");",
							"});",
							"",
							"pm.collectionVariables.set(\"ordersVersion\", pm.response.headers.get('Etag'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/orders/user/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"orders",
						"user",
						"{{userId}}"
					]
				},
				"description": "Получение версии коллекции заказов для пользователя\n"
			},
			"response": [
				{
					"name": "Заказ создан и оплачен",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"userId\": -33416308\n}"
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Создание заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"type": "text",
						"value": "{{ordersVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{order_price}}\n}"
				},
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/orders/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"orders",
						"order"
					]
				},
				"description": "Создание заказа для пользователя с указанием цены и версии коллекции заказов\n"
			},
			"response": [
				{
					"name": "Заказ создан и оплачен",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"userId\": -33416308\n}"
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Проверка изменения баланса пользователя на цену заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must have a body with expected format\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"    pm.expect(jsonData.firstname).to.be.a(\"string\");",
							"    pm.expect(jsonData.lastname).to.be.a(\"string\");",
							"    pm.expect(jsonData.email).to.be.a(\"string\");",
							"    pm.expect(jsonData.phone).to.be.a(\"string\");",
							"    pm.expect(jsonData.balance).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Balance changed by order price\", function () {",
							"    var expectedBalance = pm.collectionVariables.get(\"deposit_amount\") - pm.collectionVariables.get(\"order_price\");",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.balance).to.eql(expectedBalance);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/billing/user/:userId",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"billing",
						"user",
						":userId"
					],
					"variable": [
						{
							"description": "(Required) ID пользователя",
							"key": "userId",
							"type": "string",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Получение информации о пользователе\n"
			},
			"response": [
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Успешный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"id\": -28837666,\n \"username\": \"occ\",\n \"firstName\": \"do\",\n \"lastName\": \"an\",\n \"email\": \"ixcK\",\n \"phone\": \"irur\",\n \"balance\": 14846486\n}"
				},
				{
					"name": "Пользователя не существует",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Проверка отправки email об успешно оплаченном заказе",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must have a body with expected format\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData[0].email).to.be.a(\"string\");",
							"    pm.expect(jsonData[0].title).to.be.a(\"string\");",
							"    pm.expect(jsonData[0].message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Email sent to user 1 about successfully paid order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].email).to.eq(pm.collectionVariables.get(\"email\"));",
							"    pm.expect(jsonData[0].title).to.eq(pm.collectionVariables.get(\"successful_email_title\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/notification/email/:userId",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"notification",
						"email",
						":userId"
					],
					"variable": [
						{
							"description": "(Required) ID пользователя",
							"key": "userId",
							"type": "string",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Получение отправленных email для пользователя\n"
			},
			"response": [
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification/email/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"email",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification/email/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"email",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Успешный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification/email/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"email",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"emails\": [\n  {\n   \"email\": \"sAG3\",\n   \"title\": \"dolo\",\n   \"message\": \"Du\"\n  },\n  {\n   \"email\": \"rfev\",\n   \"title\": \"L\",\n   \"message\": \"ullamco tempor\"\n  }\n ]\n}"
				}
			]
		},
		{
			"name": "Ошибочная попытка создание заказа с устаревшей версией коллекции заказов",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "If-Match",
						"type": "text",
						"value": "{{ordersVersion}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{order_price}}\n}"
				},
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/orders/order",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"orders",
						"order"
					]
				},
				"description": "Создание заказа для пользователя с указанием цены и версии коллекции заказов\n"
			},
			"response": [
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				},
				{
					"name": "Заказ создан и оплачен",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"userId\": -33416308\n}"
				},
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		},
		{
			"name": "Проверка неизменности баланса пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(pm.request.body)",
							"console.log(responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must have a body with expected format\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.username).to.be.a(\"string\");",
							"    pm.expect(jsonData.firstname).to.be.a(\"string\");",
							"    pm.expect(jsonData.lastname).to.be.a(\"string\");",
							"    pm.expect(jsonData.email).to.be.a(\"string\");",
							"    pm.expect(jsonData.phone).to.be.a(\"string\");",
							"    pm.expect(jsonData.balance).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Balance changed by order price\", function () {",
							"    var expectedBalance = pm.collectionVariables.get(\"deposit_amount\") - pm.collectionVariables.get(\"order_price\");",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.balance).to.eql(expectedBalance);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/otusapp/rodionov_andrey/billing/user/:userId",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"otusapp",
						"rodionov_andrey",
						"billing",
						"user",
						":userId"
					],
					"variable": [
						{
							"description": "(Required) ID пользователя",
							"key": "userId",
							"type": "string",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Получение информации о пользователе\n"
			},
			"response": [
				{
					"name": "Неверный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Пользователя не существует",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Успешный запрос",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"id\": -28837666,\n \"username\": \"occ\",\n \"firstName\": \"do\",\n \"lastName\": \"an\",\n \"email\": \"ixcK\",\n \"phone\": \"irur\",\n \"balance\": 14846486\n}"
				},
				{
					"name": "Внутренняя ошибка",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": 68084008,\n \"message\": \"non sed Excepteur est\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "deposit_amount",
			"value": "200"
		},
		{
			"key": "order_price",
			"value": "90"
		},
		{
			"key": "successful_email_title",
			"value": "Order is paid"
		},
		{
			"key": "failure_email_title",
			"value": "Not enough money"
		},
		{
			"key": "ordersVersion",
			"value": ""
		}
	]
}