openapi: 3.0.0
info:
  description: "Реализованы 3 сервиса: заказа, биллинга, нотификаций. При создании пользователя создается аккаунт в сервисе биллинга, в котором есть возможность положить деньги на аккаунт и снять деньги. Сервис нотификаций позволяет отправить сообщение на email и получить список отправленных сообщений"
  version: "1.0.0"
  title: OTUS Software Architecture HW6
tags:
  - name: orders
    description: Сервис работы с заказами
  - name: billing
    description: Сервис биллинга
  - name: notification
    description: Сервис нотификаций
paths:
  /orders/order:
    post:
      tags:
        - orders
      summary: Создание заказа
      operationId: createOrder
      description: |
        Создание заказа для пользователя с указанием цены
      parameters:
        - in: header
          name: If-Match
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        $ref: '#/components/requestBodies/OrderCreation'
      responses:
        '201':
          description: Заказ создан и оплачен
          content:
            application/json:
              schema:
                type: object
                required: 
                  - orderId
                properties:
                  userId:
                    type: integer
                    format: int64
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователя не существует
        '409':
          description: Указа неактуальная версия коллекции заказов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: Недостаточно средств для оплаты заказа
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/order/{orderId}:
    get:
      tags:
        - orders
      summary: Получение информации о заказе
      operationId: getOrderInfo
      description: |
        Получение информации о заказе
      parameters:
        - name: orderId
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Заказ не существует
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/user/{userId}:
    get:
      tags:
        - orders
      summary: Получение коллекции заказов для указанного пользователя
      operationId: getOrdersCollectionVersion
      description: |
        Получение коллекции заказов для указанного пользователя и текущей версии коллекции заказов
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный запрос
          headers:
            Etag:
              schema:
                type: integer
                format: int64
              description: Version of user order collection.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Order'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /billing/user:
    post:
      tags:
        - billing
      summary: Создание пользователя
      operationId: createUser
      description: |
        Создание пользователя
      requestBody:
        $ref: '#/components/requestBodies/UserCreation'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                type: object
                required: 
                  - userId
                properties:
                  userId:
                    type: integer
                    format: int64
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /billing/user/{userId}:
    get:
      tags:
        - billing
      summary: Получение информации о пользователе
      operationId: getUserInfo
      description: |
        Получение информации о пользователе
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователя не существует
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /billing/deposit/{userId}:
    post:
      tags:
        - billing
      summary: Пополнение баланса пользователя
      operationId: deposit
      description: |
        Пополнение баланса пользователя
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - amount
              properties:
                amount:
                  type: integer
                  format: int64
        required: true
      responses:
        '200':
          description: Успешный запрос
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователя не существует
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /billing/withdraw/{userId}:
    post:
      tags:
        - billing
      summary: Снятие средств с баланса пользователя
      operationId: withdraw
      description: |
        Снятие средств с баланса пользователя
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - amount
              properties:
                amount:
                  type: integer
                  format: int64
        required: true
      responses:
        '200':
          description: Успешный запрос
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователя не существует
        '412':
          description: Недостаточно средств на балансе пользователя
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notification/email/{userId}:
    get:
      tags:
        - notification
      summary: Получение отправленных email для пользователя
      operationId: getUserEmails
      description: |
        Получение отправленных email для пользователя
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  emails:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailContent'
        '400':
          description: Неверный запрос
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - notification
      summary: Отправка email пользователю
      operationId: sendUserEmail
      description: |
        Отправка email пользователю
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailContent'
        required: true
      responses:
        '202':
          description: Задача отправки email для пользователя поставлена в очередь
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Order:
      type: object
      required: 
          - id
          - userId
          - price
          - status
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
        status:
          type: integer
          format: int64
    User:
      type: object
      required: 
          - id
          - username
          - firstName
          - lastName
          - email
          - phone
          - balance
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          maxLength: 256
        firstName:
          type: string
          maxLength: 256
        lastName:
          type: string
          maxLength: 256
        email:
          type: string
          format: email
          maxLength: 256
        phone:
          type: string
          format: phone
          maxLength: 256
        balance:
          type: integer
          format: int64
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    EmailContent:
      type: object
      required:
        - email
        - title
        - message
      properties:
        email:
          type: string
          format: email
          maxLength: 256
        title:
          type: string
          format: string
          maxLength: 256
        message:
          type: string
  requestBodies:
    OrderCreation:
      content:
        application/json:
          schema:
            type: object
            required: 
                - userId
                - price
            properties:
              userId:
                type: integer
                format: int64
              price:
                type: integer
                format: int64
      description: Информация для создания заказа
      required: true
    UserCreation:
      content:
        application/json:
          schema:
            type: object
            required: 
              - username
              - password
              - email
            properties:
              username:
                type: string
                maxLength: 256
              password:
                type: string
                format: password
                maxLength: 256
              firstName:
                type: string
                maxLength: 256
              lastName:
                type: string
                maxLength: 256
              email:
                type: string
                format: email
                maxLength: 256
              phone:
                type: string
                format: phone
                maxLength: 256
      description: Информация для создания пользователя
      required: true